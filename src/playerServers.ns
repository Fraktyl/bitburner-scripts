import { localeHHMMSS, getCurrentMoney } from 'helpers.ns'
import { getItem, setItem } 'common.ns'

const settings = {
  maxPlayerServers: 25,
  gbRamCost: 55000,
  maxGbRam: 1048576,
  maxExponent: 20,
  minPurchasedServerRam: 8,
  totalMoneyAllocation: 0.9,
  buyServers: true,
  keys: {
    serverMap: 'BB_SERVER_MAP',
  },
}

export async function main(ns) {
  while (settings.buyServers) {
    buyBestServerPossible(ns)
    if (allServersMaxed(ns)) {
      settings.buyServers = false
    }
    await ns.sleep(1000)
  }
}

function buyBestServerPossible(ns) {
  var currentMoney = getCurrentMoney(ns)
  var currentRamExponent = 2
  var existingServers = ns.getPurchasedServers()
  
  while(Math.pow(2, currentRamExponent + 1) * settings.gbRamCost <= currentMoney * settings.totalMoneyAllocation && currentRamExponent < settings.maxExponent) {
    currentRamExponent++
  }

  var maxRamCanBuy = Math.pow(2, currentRamExponent)

  if (maxRamCanBuy < settings.minPurchasedServerRam && maxRamCanBuy < Math.pow(2,settings.maxExponent)) {
    return 0
  }

  if (existingServers.length < settings.maxPlayerServers) {
      if (getCurrentMoney(ns)) >= maxRamCanBuy * settings.gbRamCost * settings.totalMoneyAllocation) {
          var server = ns.purchasedServer("pServ-" + existingServers.length + "-" + maxRamCanBuy, maxRamCanBuy)
          if (server) {
            updateServerMap(ns, serverMap, server)
            return 1
          } else {
            return 0
          }
      }
  } else {
    var worstServer = null
    var worstRam = setttings.maxGbRam
    
    for(var i = 0; i < existingServers.length; i++) {
      var maxRam = ns.getServerMaxRam(existingServers[i])
      if (maxRam < worstRam) {
        worstServer = existingServers[i]
      }
    }

    if (worstServer !== null && settings.maxGbRam > ns.getServerMaxRam(worstServer)) {
      sellPurchasedServer(ns, worstServer)
    }

    if (getCurrentMoney(ns) >= maxRamCanBuy * settings.gbRamCost * settings.totalMoneyAllocation) {
           var server = ns.purchasedServer("pServ-" + existingServers.length + "-" + maxRamCanBuy, maxRamCanBuy)
          if (server) {
            updateServerMap(ns, serverMap, server)
            return 1
          } else {
            return 0
          }
      }       
    }
  }
}

function sellPurchasedServer(ns, serverName) {
    ns.killall(serverName);
    ns.deleteServer(serverName);
    updateServerMap(ns, serverMap, server)
}

function allServersMaxed(ns) {
    var maxed = false;
    var existingServers = ns.getPurchasedServers()
    
    if(existingServers.length == settings.maxPlayerServers) {
        for(var i = 0; i < existingServers.length; i++) {
            if(ns.getServerMaxRam(existingServers[i]) < settings.maxGbRam) {
                return false;
            }
        }
        maxed = true;
    }
    return maxed;
}

function updateServerMap(ns, serverMap, host) {
  serverMap.servers[host] = {
    host,
    ports: ns.getServerNumPortsRequired(host),
    hackingLevel: ns.getServerRequiredHackingLevel(host),
    maxMoney: ns.getServerMaxMoney(host),
    growth: ns.getServerGrowth(host),
    minSecurityLevel: ns.getServerMinSecurityLevel(host),
    baseSecurityLevel: ns.getServerBaseSecurityLevel(host),
    ram: ns.getServerRam(host)[0],
    connections: ['home'],
    parent: 'home',
    children: [],
  }

  Object.keys(serverMap.servers).map((hostname) => {
    if (!ns.serverExists(hostname)) {
      delete serverMap.servers[hostname]
    }
  })

  setItem(settings.keys.serverMap, serverMap)
}
